(function(undefined){"use strict";function register(e,r,t){if(t!=undefined&&"string"!=typeof t)throw'The filter key "'+t.toString()+'" must be a string.';if(t!=undefined&&!t.length)throw"The filter key must be a non-empty string.";if("function"!=typeof e)throw'The predicate of key "'+t+'" must be a function.';if("undo"===t)throw'"undo" is a reserved key.';if(_keysIndex[t])throw'The filter "'+t+'" already exists.';t&&(_keysIndex[t]=!0),_chain.push({key:t,processor:e,predicate:r})}function unregister(e){_chain=_chain.filter(function(r){return!(r.key in e)});for(var r in e)delete _keysIndex[r]}function Filter(e){_s=e,_g=e.graph}function deepCopy(o){var copy=Object.create(null);for(var i in o)"object"==typeof o[i]&&null!==o[i]?copy[i]=deepCopy(o[i]):"function"==typeof o[i]&&null!==o[i]?eval(" copy[i] = "+o[i].toString()):copy[i]=o[i];return copy}function cloneChain(e){for(var r=e.slice(0),t=0,n=r.length;n>t;t++)r[t]=deepCopy(r[t]),"function"==typeof r[t].processor&&(r[t].processor="filter.processors."+r[t].processor.name);return r}if("undefined"==typeof sigma)throw"sigma is not declared";sigma.utils.pkg("sigma.plugins"),sigma.classes.graph.hasMethod("adjacentNodes")||sigma.classes.graph.addMethod("adjacentNodes",function(e){if("string"!=typeof e)throw"adjacentNodes: the node id must be a string.";var r,t=[];for(r in this.allNeighborsIndex[e])t.push(this.nodesIndex[r]);return t}),sigma.classes.graph.hasMethod("adjacentEdges")||sigma.classes.graph.addMethod("adjacentEdges",function(e){if("string"!=typeof e)throw"adjacentEdges: the node id must be a string.";var r,t,n=this.allNeighborsIndex[e],o=[];for(t in n)for(r in n[t])o.push(n[t][r]);return o});var _g=undefined,_s=undefined,_chain=[],_keysIndex=Object.create(null),Processors={};Processors.nodes=function(e){for(var r=_g.nodes(),t=r.length,n=_g.edges(),o=n.length;t--;)r[t].hidden=!e.call(_g,r[t])||r[t].hidden;for(;o--;)(_g.nodes(n[o].source).hidden||_g.nodes(n[o].target).hidden)&&(n[o].hidden=!0)},Processors.edges=function(e){for(var r=_g.edges(),t=r.length;t--;)r[t].hidden=!e.call(_g,r[t])||r[t].hidden},Processors.neighbors=function e(r){for(var t=_g.nodes(),n=t.length,o=_g.edges(),s=o.length,e=_g.adjacentNodes(r),i=e.length,d={};i--;)d[e[i].id]=!0;for(;n--;)t[n].id===r||t[n].id in d||(t[n].hidden=!0);for(;s--;)(_g.nodes(o[s].source).hidden||_g.nodes(o[s].target).hidden)&&(o[s].hidden=!0)},Filter.prototype.nodesBy=function(e,r){return register(Processors.nodes,e,r),this},Filter.prototype.edgesBy=function(e,r){return register(Processors.edges,e,r),this},Filter.prototype.neighborsOf=function(e,r){if("string"!=typeof e)throw'The node id "'+e.toString()+'" must be a string.';if(!e.length)throw"The node id must be a non-empty string.";return register(Processors.neighbors,e,r),this},Filter.prototype.apply=function(){for(var e=0,r=_chain.length;r>e;++e)_chain[e].processor(_chain[e].predicate);return _chain[0]&&"undo"===_chain[0].key&&_chain.shift(),_s.refresh(),this},Filter.prototype.undo=function(e){function r(){for(var e=_g.nodes(),r=e.length,t=_g.edges(),n=t.length;r--;)e[r].hidden=!1;for(;n--;)t[n].hidden=!1}var t=Object.create(null),n=arguments.length;if(1===n)if("[object Array]"===Object.prototype.toString.call(e))for(var o=0,s=e.length;s>o;o++)t[e[o]]=!0;else t[e]=!0;else if(n>1)for(var o=0;n>o;o++)t[arguments[o]]=!0;else this.clear();return unregister(t),_chain.unshift({key:"undo",processor:r}),this},Filter.prototype.clear=function(){return _chain.length=0,_keysIndex=Object.create(null),this},Filter.prototype["export"]=function(){var e=cloneChain(_chain);return e},Filter.prototype["import"]=function(e){if(e===undefined)throw"Wrong arguments.";if("[object Array]"!==Object.prototype.toString.call(e))throw'The chain" must be an array.';for(var r=cloneChain(e),t=0,n=r.length;n>t;t++){if(r[t].predicate===undefined||r[t].processor===undefined)throw"Wrong arguments.";if(r[t].key!=undefined&&"string"!=typeof r[t].key)throw'The filter key "'+r[t].key.toString()+'" must be a string.';if("function"!=typeof r[t].predicate)throw'The predicate of key "'+r[t].key+'" must be a function.';if("string"!=typeof r[t].processor)throw'The processor of key "'+r[t].key+'" must be a string.';switch(r[t].processor){case"filter.processors.nodes":r[t].processor=Processors.nodes;break;case"filter.processors.edges":r[t].processor=Processors.edges;break;case"filter.processors.neighbors":r[t].processor=Processors.neighbors;break;default:throw"Unknown processor "+r[t].processor}}return _chain=r,this};var filter=null;sigma.plugins.filter=function(e){return filter||(filter=new Filter(e)),filter}}).call(this);